datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens      Token[]
  sessions    Session[]
  quizResults QuizResult[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model FlashCard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frontText String
  backText  String

  sourcePlatformId   String
  sourcePlatformName String
  FlashCardDeck      FlashCardDeck? @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId    Int?
}

model PossibleAnswer {
  id                 Int       @id @default(autoincrement())
  text               String
  quizItemId         Int
  quizItem           QuizItem  @relation(fields: [quizItemId], references: [id], name: "PossibleAnswersToQuizItem")
  isCorrectAnswerFor QuizItem? @relation("CorrectAnswerToQuizItem")
  correctAnswerForId Int?
}

model QuizItem {
  id              Int              @id @default(autoincrement())
  questionText    String
  possibleAnswers PossibleAnswer[] @relation("PossibleAnswersToQuizItem")
  correctAnswer   PossibleAnswer?  @relation(fields: [correctAnswerId], references: [id], name: "CorrectAnswerToQuizItem")
  correctAnswerId Int?             @unique
  quiz            Quiz?            @relation(fields: [quizId], references: [id], name: "QuizItemsToQuiz")
  quizId          Int
}

model Quiz {
  id                 Int              @id @default(autoincrement())
  quizItems          QuizItem[]       @relation("QuizItemsToQuiz")
  sourcePlatformId   String
  sourcePlatformName String
  CurriculumUnit     CurriculumUnit[]
  QuizResult         QuizResult[]
}

model CurriculumUnit {
  id              Int           @id @default(autoincrement())
  quiz            Quiz          @relation(fields: [quizId], references: [id])
  quizId          Int
  flashCardDeck   FlashCardDeck @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId Int
}

model FlashCardDeck {
  id             Int              @id @default(autoincrement())
  flashCards     FlashCard[]
  CurriculumUnit CurriculumUnit[]
}

model QuizResult {
  id     Int     @id @default(autoincrement())
  passed Boolean
  quiz   Quiz    @relation(fields: [quizId], references: [id])
  quizId Int
  user   User    @relation(fields: [userId], references: [id])
  userId Int
}
